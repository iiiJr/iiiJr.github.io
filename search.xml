<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog站内搜索</title>
    <url>/2020/01/14/swiftype/</url>
    <content><![CDATA[<h2 id="blog换模板后打算重新弄一个站内搜索，折腾了很久后还是觉得swiftype好用，而且很方便。"><a href="#blog换模板后打算重新弄一个站内搜索，折腾了很久后还是觉得swiftype好用，而且很方便。" class="headerlink" title="blog换模板后打算重新弄一个站内搜索，折腾了很久后还是觉得swiftype好用，而且很方便。"></a>blog换模板后打算重新弄一个站内搜索，折腾了很久后还是觉得swiftype好用，而且很方便。</h2><h2 id="注册，先去网页上注册一个账号，我一开始用qq邮箱发现行不通，后来就用了学校给的学生邮箱去注册的。"><a href="#注册，先去网页上注册一个账号，我一开始用qq邮箱发现行不通，后来就用了学校给的学生邮箱去注册的。" class="headerlink" title="注册，先去网页上注册一个账号，我一开始用qq邮箱发现行不通，后来就用了学校给的学生邮箱去注册的。"></a>注册，先去网页上注册一个账号，我一开始用qq邮箱发现行不通，后来就用了学校给的学生邮箱去注册的。</h2><ul>
<li><a href="https://app.swiftype.com/home" target="_blank" rel="noopener">https://app.swiftype.com/home</a> </li>
</ul>
<p>注册完后它会让你选择站点搜索和应用搜索，这里选择站点搜索，再单击一下创建web工程<br><img src="/css/swiftype/1.png" alt="avatar"><br>单击后就是输入自己的需要建立搜索的站点了，这里需要在你站点最后面加多一条/，我第一次没加导致没显示出来，然后语言我选择的是English。<br><img src="/css/swiftype/2.png" alt="avatar"><br>这里我创建了个test1，到这个页面就是配置了，点击MANAGE下的Content，就是你页面的所有内容了，可以自定义设置搜索权重什么的这里就不多说。<br><img src="/css/swiftype/3.png" alt="avatar"><br>然后我们单击 Interface下的 install Search去安装它，这里我是已经安装成功了。<br><img src="/css/swiftype/4.png" alt="avatar"><br>我是自己配置搜索结果页的，所以自己在hexo中新建页面<br><img src="/css/swiftype/5.jpg" alt="avatar"><br>然后在hexo的source目录下建立一个search文件夹，并在其中新建一个index.md文件，其内容为：</p>
<pre><code class="bash">layout: search
title: search
---
&lt;div class=<span class="string">"st-search-container"</span>&gt;&lt;/div&gt;</code></pre>
<p>然后在更新部署后就可以尝试有没有搜索功能了<br><img src="/css/swiftype/6.png" alt="avatar"><br>成功了</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>js，swiftype</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建ss与路由转发</title>
    <url>/2020/01/07/vpn/</url>
    <content><![CDATA[<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>宿舍楼连接内网在搭个梯子说不定就可以出去上网了。由于没有服务器只有路由器。一开始是想在路由器上搭个pptp啥的。发现实训室的路由器没有vpn功能，就想在电脑上搭建，在路由器做路由转发了。<br>所以我先在路由器上弄了个路由转发。端口我给的是9999.IP地址指的是要做转发的内网ip。</p>
<p><img src="/css/vpn/1.png" alt="avatar"></p>
<p>路由转发成功后可以开始搭建了。<br>首先是在ubuntu上搭建了个ss。这个网上很多教程就不多说了，随便百度都有的。</p>
<p>搭建完成后就是在宿舍机子做实验</p>
<p><img src="/css/vpn/2.png" alt="avatar"></p>
<p>最后就是看看能不能上网了。<br><img src="/css/vpn/3.png" alt="avatar"><br>成功。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>虽然它后面莫名其妙的好了，但还是说一下解决办法。<br>中途遇到个问题发现他只给http走了代理，其他协议并没有走那个代理，所以导致其他软件，网易云，微信等都没有网络（一般来说客户端都会带有全局功能，可我设置了全局还是没有解决），想了挺久也问了下dalao，想到的解决办法就是在软件里设置代理，或者系统全局代理，我用的是软件设置代理。</p>
<p><img src="/css/vpn/4.png" alt="avatar"><br>软件是proxifier，这样就能解决问题了，虽然网络卡了一点。</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_8</title>
    <url>/2019/12/22/trainingDiary-8/</url>
    <content><![CDATA[<h1 id="2019-12-22-Chaincode-helloworld"><a href="#2019-12-22-Chaincode-helloworld" class="headerlink" title="2019-12-22 Chaincode helloworld"></a>2019-12-22 Chaincode helloworld</h1><h2 id="第一个链码-helloWorld"><a href="#第一个链码-helloWorld" class="headerlink" title="第一个链码 helloWorld"></a>第一个链码 helloWorld</h2><p>建 helloworld 文件夹，并在文件夹下新建 helloworld.go 和 helloworld_test.go<br>编写链上代码 helloworld.go</p>
<p>导入关键依赖包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="comment">/*导入 chaincode shim 包和 peer protobuf 包*/</span></span><br><span class="line">    <span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span></span><br><span class="line">    <span class="string">"github.com/hyperledger/fabric/protos/peer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现了 Chaincode 接口 Init 方法和 Invoke 方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// helloworld 结构体</span></span><br><span class="line"><span class="keyword">type</span> HelloWorld <span class="keyword">struct</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结构体中的初始化方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloWorld)</span> <span class="title">Init</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">peer</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//接受 string 数组</span></span><br><span class="line">    args:= stub.GetStringArgs()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">2</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> shim.Error(<span class="string">"要输入键和值"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//转为 k-v 写入区块链</span></span><br><span class="line">    err := stub.PutState(args[<span class="number">0</span>],[]<span class="keyword">byte</span>(args[<span class="number">1</span>]))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    	shim.Error(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//调用Chaincode</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloWorld)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">peer</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//获取要调用的方法名和方法参数</span></span><br><span class="line">	fn, args := stub.GetFunctionAndParameters()</span><br><span class="line">	<span class="comment">//根据方法名调用方法（set，get）</span></span><br><span class="line">	<span class="keyword">if</span> fn ==<span class="string">"set"</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> s.set(stub, args)</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> fn == <span class="string">"get"</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> s.get(stub, args)</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> shim.Error(<span class="string">"方法不存在"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set 和 get 业务方法实现</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloWorld)</span> <span class="title">set</span><span class="params">(stub shim.ChaincodeStubInterface , args []<span class="keyword">string</span>)</span> <span class="title">peer</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(<span class="string">"要输入键和值"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//写入</span></span><br><span class="line">	err := stub.PutState(args[<span class="number">0</span>],[]<span class="keyword">byte</span>(args[<span class="number">1</span>]))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloWorld)</span> <span class="title">get</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">peer</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(args) != <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(<span class="string">"要输入一个键"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//读出</span></span><br><span class="line">	value, err := stub.GetState(args[<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> shim.Success(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后 main 方法，启动实例</p>
<pre><code class="go"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{

    <span class="keyword">if</span> err := shim.Start(<span class="built_in">new</span>(HelloWorld)); err != <span class="literal">nil</span> {
        fmt.Println(<span class="string">"HelloWorld start error"</span>)
    }
} </code></pre>
<p>编写链上代码测试用例 helloworld_test.go<br>利用 chaincode shim包 MockStub 的 MockInit 方法和 MockInvoke 方法 进行模拟测试</p>
<pre><code class="go"><span class="keyword">import</span> (
    <span class="string">"fmt"</span>
    <span class="string">"testing"</span>
    <span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span>
)




<span class="keyword">var</span> stub *shim.MockStub

<span class="comment">//测试 Init 方法</span>
<span class="function"><span class="keyword">func</span> <span class="title">testInit</span><span class="params">(t *testing.T, args [][]<span class="keyword">byte</span>)</span></span> {

    res := stub.MockInit(<span class="string">"1"</span>, args)
    <span class="keyword">if</span> res.Status != shim.OK {
        fmt.Println(<span class="string">"Init failed : "</span>, <span class="keyword">string</span>(res.Message))
        t.FailNow()
    }
}

<span class="comment">//测试 set 方法</span>
<span class="function"><span class="keyword">func</span> <span class="title">testSet</span><span class="params">(t *testing.T, key <span class="keyword">string</span>, value <span class="keyword">string</span>)</span></span> {

    res := stub.MockInvoke(<span class="string">"1"</span>, [][]<span class="keyword">byte</span>{[]<span class="keyword">byte</span>(<span class="string">"set"</span>), []<span class="keyword">byte</span>(key),[]<span class="keyword">byte</span>(value)})
    <span class="keyword">if</span> res.Status != shim.OK {
        fmt.Println(<span class="string">"set"</span>, key, <span class="string">" failed : "</span>, <span class="keyword">string</span>(res.Message))
        t.FailNow()
    }

}

<span class="comment">//测试 get 方法</span>
<span class="function"><span class="keyword">func</span> <span class="title">testGet</span><span class="params">(t *testing.T, key <span class="keyword">string</span>)</span></span> {

    res := stub.MockInvoke(<span class="string">"1"</span>, [][]<span class="keyword">byte</span>{[]<span class="keyword">byte</span>(<span class="string">"get"</span>), []<span class="keyword">byte</span>(key)})
    <span class="keyword">if</span> res.Status != shim.OK {
        fmt.Println(<span class="string">"get"</span>, key, <span class="string">"failed"</span>, <span class="keyword">string</span>(res.Message))
        t.FailNow()
    }
    <span class="keyword">if</span> res.Payload == <span class="literal">nil</span> {
        fmt.Println(<span class="string">"get"</span>, key, <span class="string">"failed to get value"</span>)
        t.FailNow()
    }

    fmt.Println(<span class="string">"get value"</span>, key, <span class="string">" : "</span>, <span class="keyword">string</span>(res.Payload))

}

<span class="comment">//测试</span>
<span class="function"><span class="keyword">func</span> <span class="title">TestHelloWorld</span><span class="params">(t *testing.T)</span></span> {

    <span class="comment">//模拟实例</span>
    stub = shim.NewMockStub(<span class="string">"helloworld"</span>, <span class="built_in">new</span>(HelloWorld))

    testInit(t, [][]<span class="keyword">byte</span>{[]<span class="keyword">byte</span>(<span class="string">"hi"</span>), []<span class="keyword">byte</span>(<span class="string">"jonluo"</span>)})
    testGet(t, <span class="string">"hi"</span>)
    testSet(t, <span class="string">"say"</span>,<span class="string">"helloworld"</span>)
    testGet(t,<span class="string">"say"</span>)
}</code></pre>
<p>在helloworld文件夹下执行 :<br>    go test -v helloworld_test.go helloworld.go 结果：<br>    === RUN   TestHelloWorld<br>    get value hi  :  jonluo<br>    get value say  :  helloworld<br>    — PASS: TestHelloWorld (0.00s)<br>    PASS<br>    ok      command-line-arguments  0.021s</p>
<p>第一个案例就算是成功了</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_7</title>
    <url>/2019/12/20/trainingDiary-7/</url>
    <content><![CDATA[<h1 id="2019-12-20-链码的概念与原理"><a href="#2019-12-20-链码的概念与原理" class="headerlink" title="2019-12-20-链码的概念与原理"></a>2019-12-20-链码的概念与原理</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>环境基本搭建完毕，但还是有一点小问题，但已经不影响开发了，所以可以开始学习fabric提供的接口编写代码了。</p>
<h2 id="链码的概念："><a href="#链码的概念：" class="headerlink" title="链码的概念："></a>链码的概念：</h2><p>Chaincode：链上代码，简称链码，一般是指由开发人员使用Go语言（也支持Java等语言）编写的应用程序代码，提供分布式账本的状态处理逻辑。链码被部署在Fabric的网络节点中，能够独立运行在具有安全特性的受保护的 Docker 容器中，以 gRPC 协议与相应的 peer 节点进行通信，以操作（初始化或管理）分布式账本中的数据。可以根据不同的需求开发出不同的复杂的应用。</p>
<h2 id="链码分类"><a href="#链码分类" class="headerlink" title="链码分类"></a>链码分类</h2><p>在 Hyperledger Fabric 中，链码一般分为：</p>
<p>系统链码<br>用户链码</p>
<p>负责 Fabric 节点自身的处理逻辑, 包括系统配置、背书、校验等工作</p>
<p>系统链码仅支持 Go 语言, 在 Peer 节点启动时会自动完成注册和部署</p>
<h3 id="系统链码共有五种类型："><a href="#系统链码共有五种类型：" class="headerlink" title="系统链码共有五种类型："></a>系统链码共有五种类型：</h3><p>配置系统链码(CSCC)</p>
<p>CSCC：Configuration System Chaincode，负责处理 Peer 端的 Channel 配置。</p>
<p>生命周期系统链码(LSCC)</p>
<p>LSCC：Lifecycle System Chaincode，负责对用户链码的生命周期进行管理。</p>
<p>查询系统链码(QSCC)</p>
<p>QSCC：Query System Chaincode，提供账本查询 API。如获取区块和交易等信息。</p>
<p>背书管理系统链码(ESCC)</p>
<p>ESCC：Endorsement System Chaincode，负责背书(签名)过程, 并可以支持对背书策略进行管理（对提交的交易提案的模拟运行结果进行签名,，之后创建响应消息返回给客户端）</p>
<p>验证系统链码(VSCC)</p>
<p>VSCC：Validation System Chaincode，处理交易的验证，包括检查背书策略以及多版本并发控制</p>
<h3 id="用户链码"><a href="#用户链码" class="headerlink" title="用户链码"></a>用户链码</h3><p>由应用程序开发人员根据不同场景需求及成员制定的相关规则，使用 Golang（或Java等）语言编写的基于操作区块链分布式账本的状态的业务处理逻辑代码，运行在链码容器中，通过 Fabric 提供的接口与账本状态进行交互。</p>
<p>用户链码在整个应用程序中处于重要地位。因为它下可对账本数据进行操作，上可以给企业级应用程序提供调用接口。所以一个没有链码的企业级应用程序，不能称之为是基于区块链的企业级应用程序。</p>
<h3 id="链码的生命周期管理"><a href="#链码的生命周期管理" class="headerlink" title="链码的生命周期管理"></a>链码的生命周期管理</h3><p>链码开发编写完成后，并不能立刻使用，而是必须经过一系列的操作之后才能应用在 Hyperledger Fabric 网络中进而处理客户端提交的交易。这一系列的操作是由链码的生命周期来负责管理。</p>
<p>管理 Chaincode 的生命周期共有五个命令：</p>
<p><strong>install：</strong>将已编写完成的链码安装在网络节点中。</p>
<p><strong>instantiate：</strong>对已安装的链码进行实例化。</p>
<p><strong>upgrade：</strong>对已有链码进行升级。链代码可以在安装后根据具体需求的变化进行升级。</p>
<p><strong>package：</strong>对指定的链码进行打包的操作。</p>
<p><strong>singnpackage：</strong>签名。</p>
<p>状态其实指的就是账本中的数据。<br>一个链码对应一个账本，所以一般情况下链码是不可以访问其它账本中的数据的。</p>
<h2 id="链码接口"><a href="#链码接口" class="headerlink" title="链码接口"></a>链码接口</h2><p>链码启动必须通过调用 shim 包中的 Start 函数，而 Start 函数被调用时需要传递一个类型为 Chaincode 的参数，这个参数 Chaincode 是一个接口类型，该接口中有两个重要的函数 Init 与 Invoke 。<br>chaincode接口的定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Chaincode <span class="keyword">interface</span>&#123;</span><br><span class="line">	Init(stub ChaincodeStubInterface) peer.Response</span><br><span class="line">	Invoke(stub ChaincodeStubInterface) peer.Response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Init 与 Invoke 方法</p>
<p>编写链码，关键是实现 Init 与 Invoke 两个方法，必须由所有链码实现。Fabric 通过调用指定的函数来运行事务。</p>
<p><strong>Init：</strong>在链码实例化或升级时被调用, 完成初始化数据的工作。<br><strong>invoke：</strong>更新或查询提案事务中的分类帐本数据状态时，Invoke 方法被调用， 因此响应调用或查询的业务实现逻辑都需要在此方法中编写实现。</p>
<h3 id="必要结构"><a href="#必要结构" class="headerlink" title="必要结构"></a>必要结构</h3><h4 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h4><p>shim 包为链码提供了 API 用来访问/操作数据状态、事务上下文和调用其他链代码；peer 包提供了链码执行后的响应信息。所以开发链码需要引入如下依赖包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span></span><br><span class="line">shim 包提供了链码与账本交互的中间层。</span><br><span class="line">链码通过 shim.ChaincodeStub 提供的方法来读取和修改账本的状态。</span><br><span class="line"><span class="string">"github.com/hyperledger/fabric/protos/peer"</span></span><br><span class="line">peer.Response：封装的响应信息</span><br></pre></td></tr></table></figure>

<p>也就是说一个开发的链码源文件的必要结构要像这样：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入必要的包</span></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	</span><br><span class="line">	<span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span></span><br><span class="line">	<span class="string">"github.com/hyperledger/fabric/protos/peer"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个结构体</span></span><br><span class="line"><span class="keyword">type</span> SimpleChaincode <span class="keyword">struct</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为结构体添加Init方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">Init</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">peer</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line">  <span class="comment">// 在该方法中实现链码初始化或升级时的处理逻辑</span></span><br><span class="line">  <span class="comment">// 编写时可灵活使用stub中的API</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为结构体添加Invoke方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">peer</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line">  <span class="comment">// 在该方法中实现链码运行中被调用或查询时的处理逻辑</span></span><br><span class="line">  <span class="comment">// 编写时可灵活使用stub中的API</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数，需要调用shim.Start（ ）方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  err := shim.Start(<span class="built_in">new</span>(SimpleChaincode))</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">     fmt.Printf(<span class="string">"Error starting Simple chaincode: %s"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_6</title>
    <url>/2019/12/19/trainingDiary-6/</url>
    <content><![CDATA[<h1 id="2019-12-19-go-web随笔"><a href="#2019-12-19-go-web随笔" class="headerlink" title="2019-12-19-go web随笔"></a>2019-12-19-go web随笔</h1><h2 id="go-web-接收请求"><a href="#go-web-接收请求" class="headerlink" title="go web 接收请求"></a>go web 接收请求</h2><p>这个其实我昨天已经看过了一点，但昨天看的很杂，今天把它全部重新整理了一遍，内容如下：</p>
<p>http.ListenAndServe（）的接收请求，输出响应的流程如下：<br>首先调用Http.HandleFunc</p>
<p>按顺序做了几件事：</p>
<p>1 调用了DefaultServeMux的HandleFunc</p>
<p>2 调用了DefaultServeMux的Handle</p>
<p>3 往DefaultServeMux的map[string]muxEntry中增加对应的handler和路由规则</p>
<p>其次调用http.ListenAndServe(“:9090”, nil)</p>
<p>按顺序做了几件事情：</p>
<p>1 实例化Server</p>
<p>2 调用Server的ListenAndServe()</p>
<p>3 调用net.Listen(“tcp”, addr)监听端口</p>
<p>4 启动一个for循环，在循环体中Accept请求</p>
<p>5 对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务go c.serve()</p>
<p>6 读取每个请求的内容w, err := c.readRequest()</p>
<p>7 判断handler是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux</p>
<p>8 调用handler的ServeHttp</p>
<p>9 在这个例子中，下面就进入到DefaultServeMux.ServeHttp</p>
<p>10 根据request选择handler，并且进入到这个handler的ServeHTTP<br>mux.handler(r).ServeHTTP(w, r)</p>
<p>11 选择handler：</p>
<p>A 判断是否有路由能满足这个request（循环遍历ServerMux的muxEntry）</p>
<p>B 如果有路由满足，调用这个路由handler的ServeHttp</p>
<p>C 如果没有路由满足，调用NotFoundHandler的ServeHttp</p>
<p>流程图如下：<br><img src="/css/diaryImage/requeImage.png" alt="avatar"></p>
<h2 id="go-web处理请求数据"><a href="#go-web处理请求数据" class="headerlink" title="go web处理请求数据"></a>go web处理请求数据</h2><p>在Go语言中，使用http.Request结构来处理http请求的数据，在我们定义处理请求的方法，会传入http.Request的实例，如下代码中request就是代表一个请求的实例。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">//使用request可以获取http请求的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="request公开可访问字段"><a href="#request公开可访问字段" class="headerlink" title="request公开可访问字段"></a>request公开可访问字段</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">        Method <span class="keyword">string</span> <span class="comment">//方法:POST,GET...</span></span><br><span class="line">        URL *url.URL <span class="comment">//URL结构体</span></span><br><span class="line">        Proto      <span class="keyword">string</span> <span class="comment">// 协议："HTTP/1.0"</span></span><br><span class="line">        ProtoMajor <span class="keyword">int</span>    <span class="comment">// 1</span></span><br><span class="line">        ProtoMinor <span class="keyword">int</span>    <span class="comment">// 0</span></span><br><span class="line">        Header Header    <span class="comment">//头部信息</span></span><br><span class="line">        Body io.ReadCloser <span class="comment">//请求实体</span></span><br><span class="line">        GetBody <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.ReadCloser, error)</span> // <span class="title">Go</span> 1.8</span></span><br><span class="line"><span class="function">        <span class="title">ContentLength</span> <span class="title">int64</span>  //首部：<span class="title">Content</span>-<span class="title">Length</span></span></span><br><span class="line"><span class="function">        <span class="title">TransferEncoding</span> []<span class="title">string</span></span></span><br><span class="line"><span class="function">        <span class="title">Close</span> <span class="title">bool</span>           //是否已关闭</span></span><br><span class="line"><span class="function">        <span class="title">Host</span> <span class="title">string</span>          //首部<span class="title">Host</span></span></span><br><span class="line"><span class="function">        <span class="title">Form</span> <span class="title">url</span>.<span class="title">Values</span>      //参数查询的数据</span></span><br><span class="line"><span class="function">        <span class="title">PostForm</span> <span class="title">url</span>.<span class="title">Values</span> // <span class="title">application</span>/<span class="title">x</span>-<span class="title">www</span>-<span class="title">form</span>-<span class="title">urlencoded</span>类型的<span class="title">body</span>解码后的数据</span></span><br><span class="line"><span class="function">        <span class="title">MultipartForm</span> *<span class="title">multipart</span>.<span class="title">Form</span> //文件上传时的数据</span></span><br><span class="line"><span class="function">        <span class="title">Trailer</span> <span class="title">Header</span></span></span><br><span class="line"><span class="function">        <span class="title">RemoteAddr</span> <span class="title">string</span>          //请求地址</span></span><br><span class="line"><span class="function">        <span class="title">RequestURI</span> <span class="title">string</span>          //请求的<span class="title">url</span>地址</span></span><br><span class="line"><span class="function">        <span class="title">TLS</span> *<span class="title">tls</span>.<span class="title">ConnectionState</span></span></span><br><span class="line"><span class="function">        <span class="title">Cancel</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125; <span class="comment">// </span></span><br><span class="line">        Response *Response <span class="comment">//      响应数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 获得请求头(Header)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">go</span></span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">    request.RemoteAddr</span><br><span class="line">    request.RequestURI</span><br><span class="line">    request.ContentLength </span><br><span class="line">    request.Proto</span><br><span class="line">    request.Method </span><br><span class="line">    request.Referer()</span><br><span class="line">    request.UserAgent()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 获取查询参数(Query)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">go</span></span><br><span class="line">获取查询参数(url中?后面使用&amp;分隔的部分),用request.FormValue(key)方法获取查询参数，其中key为参数的名称，代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        username := request.FormValue(<span class="string">"username"</span>)</span><br><span class="line">        gender := request.FormValue(<span class="string">"gender"</span>)</span><br><span class="line">        fmt.Fprintln(writer,fmt.Sprintf(<span class="string">"用户名：%s,性别:%s"</span>,username,gender))</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(http.ListenAndServe(<span class="string">":8080"</span>,<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 获取表单信息(Form)</span></span><br><span class="line"><span class="string">我们说获取表单信息，一般是指获取Content-Type是application/x-www-form-urlencoded或multipart/form-data时，请求实体中的数据，如果你有做传统网页中的表单提交数据的经历，相信对这两种提交数据的方式应该是熟悉的，而multipart/form-data一般是用来上传文件的。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">获取Content-Type为application/x-www-form-urlencoded时提交上来的数据，可以使用request.PostForm字段request.Form和request.PostFormValue(key)方法获取，但必须先调用request.ParseForm()将数据写入request.PostForm字段中。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用request.ParseForm()函数解析body参数，这时会将参数写入Form字段和PostForm字段当中。</span></span><br><span class="line"><span class="string">使用request.Form、request.PostForm或request.PostFormValue(key)都可以获取</span></span><br><span class="line"><span class="string">request.Form和request.PostForm的类型url.Values，结构定义如下</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">go</span></span><br><span class="line"><span class="keyword">type</span> Values <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">go</span> </span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        err := request.ParseForm()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Fprintln(writer,<span class="string">"解析错误"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        username1 := request.PostForm[<span class="string">"username"</span>][<span class="number">0</span>]</span><br><span class="line">        username2 := request.PostFormValue(<span class="string">"username"</span>)</span><br><span class="line">        username3 := request.Form[<span class="string">"username"</span>][<span class="number">0</span>]</span><br><span class="line">        fmt.Fprintln(writer,fmt.Sprintf(<span class="string">"username1：%s,username2:%s,usernam3:%s"</span>,username1,username2,username3))</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(http.ListenAndServe(<span class="string">":8080"</span>,<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><p>获取Content-Type为multipart/form-data时提交上来的数据<br>使用request.ParseMultipartForm(maxMemory)，解析参数，将参数写入到MultipartForm字段当中，其中maxMemory为上传文件最大内存。<br>使用request.FormFile(文件域)，可以获取上传的文件对象：multipart.File<br>除了文件域，其中参数可以从request.PostForm字段获取，注意，此时不需要再调用request.ParseForm()了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/upload"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        err := request.ParseMultipartForm(<span class="number">32</span> &lt;&lt; <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Fprintln(writer,<span class="string">"文件上传错误"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(request.FormFile(<span class="string">"file"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(http.ListenAndServe(<span class="string">":8080"</span>,<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上头介绍的都是表单提交方式，<br>但在现在前后端分离开发趋势和APP开发中，Content-Type指application/json才是更常见的数据提交方式。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_5</title>
    <url>/2019/12/18/trainingDiary-5/</url>
    <content><![CDATA[<h1 id="学习go-web"><a href="#学习go-web" class="headerlink" title="学习go web"></a>学习go web</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>关于ubuntu fabric框架方面简单测试案例，交给了队友，所以我先来学go web先了。</p>
<h2 id="go-web"><a href="#go-web" class="headerlink" title="go web"></a>go web</h2><h3 id="http包建立Web服务器"><a href="#http包建立Web服务器" class="headerlink" title="http包建立Web服务器"></a>http包建立Web服务器</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhelloName</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    r.ParseForm()  <span class="comment">//解析参数，默认是不会解析的</span></span><br><span class="line">    fmt.Println(r.Form)  <span class="comment">//这些信息是输出到服务器端的打印信息</span></span><br><span class="line">    fmt.Println(<span class="string">"path"</span>, r.URL.Path)</span><br><span class="line">    fmt.Println(<span class="string">"scheme"</span>, r.URL.Scheme)</span><br><span class="line">    fmt.Println(r.Form[<span class="string">"url_long"</span>])</span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> r.Form &#123;</span><br><span class="line">        fmt.Println(<span class="string">"key:"</span>, k)</span><br><span class="line">        fmt.Println(<span class="string">"val:"</span>, strings.Join(v, <span class="string">""</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">"Hello astaxie!"</span>) <span class="comment">//这个写入到w的是输出到客户端的</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, sayhelloName) <span class="comment">//设置访问的路由</span></span><br><span class="line">    err := http.ListenAndServe(<span class="string">":9090"</span>, <span class="literal">nil</span>) <span class="comment">//设置监听的端口</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">"ListenAndServe: "</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>go web中要编写一个Web服务器很简单，只要调用http包的两个函数就可以了。</p>
<h4 id="web工作方式概念"><a href="#web工作方式概念" class="headerlink" title="web工作方式概念"></a>web工作方式概念</h4><p>以下均是服务器端的几个概念</p>
<p> Request：用户请求的信息，用来解析用户的请求信息，包括post、get、cookie、url等信息<br>Response：服务器需要反馈给客户端的信息<br>Conn：用户的每次请求链接<br>Handler：处理请求和生成返回信息的处理逻辑</p>
<h4 id="http包执行流程"><a href="#http包执行流程" class="headerlink" title="http包执行流程"></a>http包执行流程</h4><p>http包执行流程：</p>
<p>创建Listen Socket, 监听指定的端口, 等待客户端请求到来。</p>
<p>Listen Socket接受客户端的请求, 得到Client Socket, 接下来通过Client Socket与客户端通信。</p>
<p>处理客户端的请求, 首先从Client Socket读取HTTP请求的协议头, 如果是POST方法, 还可能要读取客户端提交的数据, 然后交给相应的handler处理请求, handler处理完毕准备好客户端需要的数据, 通过Client Socket写给客户端。</p>
<h3 id="处理器和处理函数"><a href="#处理器和处理函数" class="headerlink" title="处理器和处理函数"></a>处理器和处理函数</h3><h4 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h4><p>一个处理器就是一个拥有ServeHTTPf方法的接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ServeHTTP(http.ResponseWriter, *http.Request)</span><br></pre></td></tr></table></figure>

<p>http.Handle可以将处理器绑定至DefaultServeMux</p>
<h4 id="处理器函数"><a href="#处理器函数" class="headerlink" title="处理器函数"></a>处理器函数</h4><p>处理器函数是一个具有特定签名的函数，即HandlerFunc。特定签名如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br></pre></td></tr></table></figure>

<p>处理器函数只不过是创建处理器的一种便利的方法而已。Go语言拥有一种HandlerFunc函数类型，它可以把一个带有正确签名的函数f（即一个handlerFunc）转换成一个带有f的Handler。http.HandleFunc的内部实现，就是调用HandlerFunc函数来实现的。http.HandleFunc实现如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">    DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">    mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 多路复用处理函数</span></span><br><span class="line"><span class="string">这最后的运行结果就是当你输入h1的时候进入第一个，h2第二个，h3第三个</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多个处理器函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler1</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"1 欢迎访问 www.ydook.com !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler2</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"2 欢迎访问 www.ydook.com !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler3</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"3 欢迎访问 www.ydook.com !"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 设置多路复用处理函数</span></span><br><span class="line">	mux := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">	mux.HandleFunc(<span class="string">"/h1"</span>, handler1)</span><br><span class="line">	mux.HandleFunc(<span class="string">"/h2"</span>, handler2)</span><br><span class="line">	mux.HandleFunc(<span class="string">"/h3"</span>, handler3)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置服务器</span></span><br><span class="line">	server := &amp;http.Server&#123;</span><br><span class="line">		Addr:    <span class="string">"127.0.0.1:8000"</span>,</span><br><span class="line">		Handler: mux,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置服务器监听请求端口</span></span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>LAMP</title>
    <url>/2019/12/18/ubuntuPhpmyadmin/</url>
    <content><![CDATA[<p>1.安装nginx服务器<br> 使用官方PPA安装 Nginx 最新版本，使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add-apt-repository ppa:nginx/stable</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br><span class="line"> Nginx相关控制命令： </span><br><span class="line"> 启动     ： /etc/init.d/nginx start</span><br><span class="line"> 关闭     ： /etc/init.d/nginx stop</span><br><span class="line"> 重启     ： /etc/init.d/nginx restart</span><br><span class="line"> 查看状态 ： /etc/init.d/nginx status</span><br></pre></td></tr></table></figure>

<p>2.安装PHP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php5-cli php5-cgi php5-fpm php5-mcrypt php5-mysql</span><br><span class="line"> ※记得安装完之后，一定要重启fpm</span><br><span class="line">/etc/init.d/php5-fpm restart</span><br></pre></td></tr></table></figure>

<p>3.配置nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  在修改之前，将默认的配置文件备份</span><br><span class="line">cp -pf /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak</span><br><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>

<p>  修改 root 为  “root /var/www/nginx;”<br>  修改 index 为 “index index.html index.htm index.php;”<br>  找到以下内容，把对应的前面#注释去掉，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">#</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini</span><br><span class="line"></span><br><span class="line">        # With php5-cgi alone:</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        # With php5-fpm:</span><br><span class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.安装MySQL数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install mysql-server</span><br><span class="line">  ※安装过程中会提示输入数据库root账号的密码。</span><br></pre></td></tr></table></figure>

<p>5.安装phpmyadmin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install phpmyadmin</span><br><span class="line">  ※安装过程中会提示输入数据库管理员权限的密码，和phpmyadmin自身登录的密码。</span><br><span class="line">  建立连接：</span><br><span class="line">ln -s /usr/share/phpmyadmin /var/www/phpmyadmin</span><br></pre></td></tr></table></figure>

<p>6.测试，在游览器中打开 <a href="http://127.0.0.1/phpmyadmin" target="_blank" rel="noopener">http://127.0.0.1/phpmyadmin</a></p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_4</title>
    <url>/2019/12/17/daily4/</url>
    <content><![CDATA[<h1 id="2019-12-17-按着书籍开始搭建框架。"><a href="#2019-12-17-按着书籍开始搭建框架。" class="headerlink" title="2019-12-17-按着书籍开始搭建框架。"></a>2019-12-17-按着书籍开始搭建框架。</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>经历了各种失败，今天书籍终于到了，开始按着书籍来做网络demo了，继续开始做demo。</p>
<h2 id="按着书籍搭建环境"><a href="#按着书籍搭建环境" class="headerlink" title="按着书籍搭建环境"></a>按着书籍搭建环境</h2><p>我又一次重新搭建环境，跟着书籍上的框架重新搭建，书籍中有个是脚本搭建，有个是手动实现，我先是用脚本搭建，我使用脚本后，它一直卡在了一拉镜像的步骤，所以就放在那让他继续拉了，我开了另一个窗口实现了手动实现，搭建成功了。<br>然后我继续按着书籍中的案例，编译生成工具，fabric框架搭建网络环境时需要的辅助工具有三个，分别是configtxgen，cryptogen，configtxlator这三个工具<br>书籍上写的是使用命令make xxxxxx（xxxx未三个工具名字）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iiijr@iiijr-virtual-machine:~/hyfa$ make configtxgen</span><br><span class="line">make: *** No rule to make target &apos;configtxgen&apos;。 停止。</span><br></pre></td></tr></table></figure>

<p>出现了新的报错，我快哭了，<br>——————————————————————————————————————————<br>吃完饭回来，百度了很久，没百度出来，好想我遇到的错，都没百度出了过！！！！<br>——————————————————————————————————————————<br>然后是接着去上课，上完课吃完饭后就是去开会。</p>
<p>回来后把问题都问了队友，让队友去试试搭建的成功吗。<br>至于我，只能先去看下做好的项目中的源代码了。。。。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_3</title>
    <url>/2019/12/16/daily3/</url>
    <content><![CDATA[<h1 id="2019-12-16-继续建立一个基于fabric网络的demo"><a href="#2019-12-16-继续建立一个基于fabric网络的demo" class="headerlink" title="2019-12-16-继续建立一个基于fabric网络的demo"></a>2019-12-16-继续建立一个基于fabric网络的demo</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>昨天晚上大概发现了自己没有上面东西所以创建不了新的网络demo，所以今天继续跟着问题寻找下去（漫无目的），今天继续试着搭建网络。</p>
<h2 id="重新搭建环境"><a href="#重新搭建环境" class="headerlink" title="重新搭建环境"></a>重新搭建环境</h2><p>今天一早醒来的第一件事就是给原来的环境拍了个快照，然后重新还原到初始快照，又搭建了一次整个fabric框架，搭建过程我就不复述了，网上很多教程，我是看着这个搭建的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.jianshu.com/p/0ec409f77fb3</span><br></pre></td></tr></table></figure>

<p>重新搭建环境又是一大堆乱七八糟的报错，东整整西搞搞，一早上就这样过去了，好在终于把初始环境搭建好了。</p>
<h2 id="简单的事例"><a href="#简单的事例" class="headerlink" title="简单的事例"></a>简单的事例</h2><p>在百度上找到了个fabric-samples的项目，是个测试项目，所以就跟着搭建了。博客地址在这。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_36956154/article/details/82317514</span><br></pre></td></tr></table></figure>

<p>跟着它的搭建，我被卡在了这一步，也报了错，首先是调用一个cryptogen工具来生成各种网络实体加密材料。<br>这里调用了跟他报了一样的错，然后他的下一步是在网上拉项目下来，我就在这里卡住了。</p>
<p>这是跟他一样情况的报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost first-network]# bash byfn.sh -m generate</span><br><span class="line">Generating certs and genesis block for with channel &apos;mychannel&apos; and CLI timeout of &apos;10000&apos;</span><br><span class="line">Continue (y/n)? y</span><br><span class="line">proceeding ...</span><br><span class="line">which: no cryptogen in (/opt/gopath/src/github.com/hyperledger/fabric-samples/first-network/../bin:/opt/gopath/src/github.com/hyperledger/fabric-samples/first-network:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">cryptogen tool not found. exiting</span><br></pre></td></tr></table></figure>

<p>然后是拉项目，在这里时，它拉不下来，一直报错。<br>开始百度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iiijr@iiijr-virtual-machine:~/go/src/github.com/hyperledger/fabric-samples/bin$ ./get-byfn.sh </span><br><span class="line">===&gt; Downloading Build Your First Network sample application</span><br><span class="line">./get-byfn.sh: 行 13: VERSION: 未找到命令</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   995    0   995    0     0    333      0 --:--:--  0:00:02 --:--:--   333</span><br></pre></td></tr></table></figure>

<p>我在查了各种资料，也翻了很多博客后，最后去这个地址看了下。我发现！！，根本没有这个文件，它换了地址！！！<br>然后我跟着他换了地址。终于，它开始拉了！！<br>然后我发现了新的问题，它拉的，实在是太慢了，我不清楚是网络问题还是什么问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iiijr@iiijr-virtual-machine:~/go/src/github.com/hyperledger/fabric-samples/bin$ curl https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/linux-amd64-1.0.0/hyperledger-fabric-linux-amd64-1.0.0.tar.gz | tar xz</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  1 22.5M    1  387k    0     0   3017      0  2:10:45  0:02:11  2:08:34     0</span><br><span class="line">curl: (56) GnuTLS recv error (-54): Error in the pull function.</span><br></pre></td></tr></table></figure>

<p>它拉了整整两个钟！！！这期间我一直在找别的源文件或者其他人已经下载过的文件，发现都没什么用，最后耐心等待。</p>
<p>终于它拉完了。我在我的ubuntu下文件目录下看到了bin，太激动了。<br>马上开始下一步，执行脚本。新的开始，新的报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iiijr@iiijr-virtual-machine:~/go/src/github.com/hyperledger/fabric-samples/first-network$ bash byfn.sh -m generate </span><br><span class="line">Generating certs and genesis block for channel &apos;mychannel&apos; with CLI timeout of &apos;10&apos; seconds and CLI delay of &apos;3&apos; seconds</span><br><span class="line">Continue? [Y/n] y</span><br><span class="line">proceeding ...</span><br><span class="line">/home/iiijr/go/src/github.com/hyperledger/fabric-samples/first-network/../bin/cryptogen</span><br><span class="line"></span><br><span class="line">##########################################################</span><br><span class="line">##### Generate certificates using cryptogen tool #########</span><br><span class="line">##########################################################</span><br><span class="line">+ cryptogen generate --config=./crypto-config.yaml</span><br><span class="line">org1.example.com</span><br><span class="line">org2.example.com</span><br><span class="line">+ res=0</span><br><span class="line">+ set +x</span><br><span class="line"></span><br><span class="line">Generate CCP files for Org1 and Org2</span><br><span class="line">/home/iiijr/go/src/github.com/hyperledger/fabric-samples/first-network/../bin/configtxgen</span><br><span class="line">##########################################################</span><br><span class="line">#########  Generating Orderer Genesis block ##############</span><br><span class="line">##########################################################</span><br><span class="line">2019-12-16 18:46:22.296 CST [common/configtx/tool] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2019-12-16 18:46:22.315 CST [common/configtx/tool/localconfig] Load -&gt; CRIT 002 Error unmarshaling config into struct:  17 error(s) decoding:</span><br><span class="line"></span><br><span class="line">* &apos;&apos; has invalid keys: capabilities, channel</span><br><span class="line">* &apos;Application&apos; has invalid keys: Capabilities, Policies</span><br><span class="line">* &apos;Orderer&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Organizations[0]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Organizations[1]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Organizations[2]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Profiles[SampleMultiNodeEtcdRaft]&apos; has invalid keys: Capabilities, Policies</span><br><span class="line">* &apos;Profiles[SampleMultiNodeEtcdRaft].Application&apos; has invalid keys: Capabilities, Policies</span><br><span class="line">* &apos;Profiles[SampleMultiNodeEtcdRaft].Application.Organizations[0]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Profiles[SampleMultiNodeEtcdRaft].Consortiums[SampleConsortium].Organizations[0]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Profiles[SampleMultiNodeEtcdRaft].Consortiums[SampleConsortium].Organizations[1]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Profiles[SampleMultiNodeEtcdRaft].Orderer&apos; has invalid keys: Capabilities, EtcdRaft, Policies</span><br><span class="line">* &apos;Profiles[SampleMultiNodeEtcdRaft].Orderer.Organizations[0]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Profiles[TwoOrgsChannel]&apos; has invalid keys: Capabilities, Policies</span><br><span class="line">* &apos;Profiles[TwoOrgsChannel].Application&apos; has invalid keys: Capabilities, Policies</span><br><span class="line">* &apos;Profiles[TwoOrgsChannel].Application.Organizations[0]&apos; has invalid keys: Policies</span><br><span class="line">* &apos;Profiles[TwoOrgsChannel].Application.Organizations[1]&apos; has invalid keys: Policies</span><br><span class="line">Failed to generate orderer genesis block...</span><br></pre></td></tr></table></figure>

<p>执行了脚本后，它报了这些错。我去百度了下，他们说的意思大概是说，我刚刚拉了两个小时拉下来的文件版本和这个fabric框架环境不符，已经崩溃。</p>
<p>开心找对应版本，是的，我又找到了对应版本，决定重拉一次，又等了无数时间，然后又执行了一次，然后还是同样的错误。<br>然后我就一直卡在这一步，查找了各种资料，换了无数版本，重新搭建了无数次环境，可它还是不行。泪奔。。。<br>还是要跟着书记来系统学比较现实，书籍到了，刚刚翻了几页，看了一下搭建环境啥的，没发现有什么大问题，决定明天好好跟着书籍来一遍，今天已经崩溃，洗个澡先，开溜。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_2</title>
    <url>/2019/12/15/daily2/</url>
    <content><![CDATA[<h1 id="2019-12-15-建立一个基于fabric网络的demo（然而并没有成功）"><a href="#2019-12-15-建立一个基于fabric网络的demo（然而并没有成功）" class="headerlink" title="2019-12-15-建立一个基于fabric网络的demo（然而并没有成功）"></a>2019-12-15-建立一个基于fabric网络的demo（然而并没有成功）</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>昨天看了sdk的基本包应用和了解了fabirc框架的一些部分节点组织通道之类的作用，但是也还没继续深入（这个先交给我的好队友吧），今天想先试着搭建一个新的网络demo并写一下基本的账户管理，可是我发现我并没搭出来。</p>
<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h3 id="1"><a href="#1" class="headerlink" title="1:"></a>1:</h3><p>今天去网上可以说是搜了一整天的资料，太零零碎碎了，说的也不大仔细（可能是我太菜了），他们的做法都是先独立创建一个目录文件，我也跟着它创建了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $GOPATH/src/github.com/hyperledger/fabric-demo</span><br><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric-demo</span><br></pre></td></tr></table></figure>

<p>可是，创建完后，我就傻了，据博客所说，它上面有配置文件，它说先初始化容器，我初始化了，然后！然后生产节点PKI文件和创世块等基础配置，它是直接打了这两个命令！课我没有这个generate.sh啊！！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd basic-network/</span><br><span class="line">./generate.sh</span><br></pre></td></tr></table></figure>

<p>好的，开始研究，它是哪来的，它说了一段话，说这是它写好的配置文件，可它没说写哪，我就自己找了下，发现它博客下面有github项目地址，配置文件是在那里，我就把它给考进了我的ubuntu中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/wesker8088/fabric-account.git</span><br></pre></td></tr></table></figure>

<p>clone下来后，我将它放进我的文件夹中，然后运行它，它就报错了，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./generate.sh: 16: ./generate.sh: cryptogen: not found Failed to generate crypto material...</span><br></pre></td></tr></table></figure>

<p>翻译是未生成加密材料<br>这个我也不知道是什么错，然后又开始找错误。<br>网上找到的问题解答，各种各样，我也试了很多种，没有一种是可以的。也觉得很奇怪，不明白为什么，我就去看了fabric的中文文档，看看可不可以看出什么来。<br>然后我就发现了，文档的环境搭建,因为我是搭建完成了环境的，我就接着他搭建完环境的步骤继续走下去，它上面写了个工具，叫configtxgen，它的作用是生成两个内容： Orderer的bootstrap block和Fabric的channel configuration transaction。<br>然后我就在我搭建好的环境里，找这个工具，然而并没有找到。<br>没有找到我也就先跳过了，在后面继续看别的，文档说它为了给我们方便使用，给了我们一个脚本，这脚本叫generateCfgTrx.sh，意思就是整合了上面的工具，帮我门生成那两个内容，然而我也没有这个脚本，至于为什么这些脚本为什么都没有，我也不是很清楚，可能是因为fabric版本不一样，也可能是安装环境是出现了我不知道的错误，所以我就继续往后看。<br>文档中有一段，教我们怎么搭建第一个网络，我点进去看了，它说在例子中有一个脚本，可以帮助你快速搭建一个网络，然后，我这个脚本也没用，它叫byfn.sh。<br>又开始了百度之旅，我搜的是fabric文件例子中为什么没有byfn.sh这个脚本，结果出来的百度，只有运行它之后为什么报错，好像没有人没遇到我这个情况，在加上百度资料也少，（人也快傻了）害！！！</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>trainingDiary_1</title>
    <url>/2019/12/14/%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="2019-12-14-Fabric-SDK"><a href="#2019-12-14-Fabric-SDK" class="headerlink" title="2019-12-14-Fabric SDK"></a>2019-12-14-Fabric SDK</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>关于框架的环境搭建已经完成，但是对整个框架的操作原理自己还是没摸清楚，在加上go语言也只是刚刚接触，还不是很能熟它的各种代码，因为队友是弄系统的，所以我不打算先深入到摸透整个框架，和队友分工，我先学开发那一块，他先深入，我们在一起互相学习，想了很多方案，不知道该从哪里入手好，因为对于整个框架还不是很熟悉，所以没急着先去弄智能合约什么的就先从框架开放的sdk入手了，sdk是一定要熟练的，如果对它都不熟悉，开始写代码可能报个错都要查半天，所以就从sdk先入手了。<br>至于启动整个生鲜的项目的话还不怎么着急。先把go和sdk玩熟了后在开始去启动项目，看源码，学习一整个框架，必须先把基础打好，才能开始写代码。</p>
<h2 id="Fabric-SDK简介"><a href="#Fabric-SDK简介" class="headerlink" title="Fabric SDK简介"></a>Fabric SDK简介</h2><p>今天由于早上和下午都教学楼都是考试也进不去，只能在宿舍用手机看下部分sdk简介，晚上才过来开始查看整个sdk文档。<br>简介大概说的就是：<br>Farbric的Peer节点和Orderer节点都提供了基于gRPC协议的接口，用于和Peer节点与Orderer节点进行命令/数据交互。为了简化开发，为开发人员开发应用程序提供操作Fabric区块链网络的API，Fabric官方提供了多种语言版本的SDK。其中就有go的sdk<br>（这里原本不知道gRPC是什么意思，查了后发现gRPC是用来指定一个可以远程调用的带有参数和返回类型的的方法。在服务端，服务实现这个接口并且运行gRPC服务处理客户端调用。在客户端，有一个stub提供和服务端相同的方法。）其实简单来说就是一个拿来服务端和客户端通信和简化通信系统的构建的，但记住它支持多种语言，基于http/2标准设计。</p>
<p><img src="/css/diaryImage/gRPC.png" alt="avatar"></p>
<p>回到正题，fabric中可以通过SDK访问Fabric网络中的多种资源，包括账本、交易、链码、事件、权限管理等，应用程序代表用户与Fabric网络进行交互，Fabric SDK API提供了如下功能：<br>A、创建通道<br>B、将peer节点加入通道<br>C、在peer节点安装链码<br>D、在通道实例化链码<br>E、通过链码调用交易<br>F、查询交易或区块的账本</p>
<p>安装的话他是给出了fabric sdk 就在github上：</p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/hyperledger/fabric-sdk-go</span><br></pre></td></tr></table></figure></code></pre><p>关于sdk的源码结构，其实就是说说包中的功能</p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg/fabsdk: Fabric SDK的主要包，允许基于配置创建上下文。上下文由客户端软件包使用。</span><br><span class="line">pkg/client/channel: 提供通道交易相关功能</span><br><span class="line">pkg/client/event: 提供通道事件相关功能</span><br><span class="line">pkg/client/ledger: 启用对通道底层账本的查询相关功能</span><br><span class="line">pkg/client/resmgmt: 提供资源管理功能，例如安装链码</span><br><span class="line">pkg/client/msp: 启用身份管理相关功能</span><br></pre></td></tr></table></figure></code></pre><h2 id="Fabric-SDK功能模块"><a href="#Fabric-SDK功能模块" class="headerlink" title="Fabric SDK功能模块"></a>Fabric SDK功能模块</h2><h3 id="API："><a href="#API：" class="headerlink" title="API："></a>API：</h3><p>对于应用开发者来说，插件化的API可以支持SDK提供的关键接口的可选实现。对于每个接口，都有内置的默认实现，也可以灵活自定义。（意思就是说有内置的包，但是当然你也可以自己实现）</p>
<h4 id="Fabric-client"><a href="#Fabric-client" class="headerlink" title="Fabric-client:"></a>Fabric-client:</h4><p>这个包的话提供的API是框架的网络核心组件，就是对peer，order这些节点的进行交互。<br>功能的话包括（创建channel，请求peer节点加入channel，在peer安装chaincode，在channel中实例化chaincode，调用chaincode来调用食物，查询分类账的事物或块等）</p>
<p>这里解释一下：</p>
<h4 id="peer："><a href="#peer：" class="headerlink" title="peer："></a>peer：</h4><p>fabric网络中的节点，意思是一个运行这的docker容器，可以和网络中的其他peer进行通信，peer可以分为两种类型：</p>
<p>endorsing peer/endorser：<br>安装和执行chaincode等一系列操作都离不开peer，我们通常会说将chaincode安装在某个peer上。它既可以是模拟chaincode执行的endorser也可以是验证背书策略是否满足条件的</p>
<p>endorsing peer：<br>安装和执行chaincode等一系列操作都离不开peer，我们通常会说将chaincode安装在某个peer上。它既可以是模拟chaincode执行的endorser也可以是验证背书策略是否满足条件的endorsing peer。</p>
<p>anchor peer<br>被称为锚节点。作为一个channel或org的代表，从orderer获取信息，并且组内广播给其他peer。其他peer可以不直接跟orderer打交道。（它可能是个组长，老师给它通知他广播给别人，这样别人就不用单独去访问orderer了）</p>
<h4 id="Org"><a href="#Org" class="headerlink" title="Org"></a>Org</h4><p>一个或多个peer组成org。在文件crypto-config.yaml中可以设置如下block指定一个org中peer数量。（这个是组织org也本身就是组织的缩写，把节点们放在一起也就是组织了）</p>
<h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><pre><code>channel指一个在两个或多个特定网络成员间的专门以机密交易为目的而建立的私有&quot;子网&quot;。（类似网络中的局域网吧，建立网络让成员在网络中交易，当然这比局域网要安全得多）</code></pre><p>刚刚开始不知道为什么要实例化所以去了解了下<br>        在 Fabric 中，channel 代表了一个私有的广播通道，保证了消息的隔离性和私密性，它由 orderer 来管理。channel 中的成员共享该 channel 的账本，并且只有通过验证的用户才能在 channel 中进行交易，与一个 channel 相关的属性记录在该channel的初始区块中，可通过 reconfiguration 交易进行更改。channel的初始区块由 create channel 交易生成，peer 向 orderer 发送该交易时会带有的 config.tx 文件，该文件定义 channel 的属性。<br>总的来说他们的关系就是下图：</p>
<p><img src="/css/diaryImage/relation.png" alt="avatar"></p>
<h2 id="fabric-ca-client"><a href="#fabric-ca-client" class="headerlink" title="fabric-ca-client"></a>fabric-ca-client</h2><p>fabric-ca-client模块提供与可选组件fabric-ca进行交互的API，fabric-ca提供成员管理服务。fabric-ca-client模块主要功能有（注册新用户，注册用户以获得由fabric CA签名的注册证书，通过注册ID撤销现有的用户或撤销特定证书，可定制持久化存储）（简单来说就是注册，删除用户用的）</p>
<p>（整整花费了一个下午和晚上才找齐了关于框架的各种资料，在慢慢罗列，理解，在写出来，头大），总结了下今天也就是把整个sdk中的各种模块都理解一遍，再把重要的几个给罗列出来</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次刷作业次数的脚本</title>
    <url>/2019/10/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%88%B7%E4%BD%9C%E4%B8%9A%E6%AC%A1%E6%95%B0%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="教师次数刷新"><a href="#教师次数刷新" class="headerlink" title="教师次数刷新"></a>教师次数刷新</h2><p>一个普通的登录界面<br><img src="/css/teacherRefreshTimesImage/1.png" alt="avatar"></p>
<p>第一次输入账号密码后显示模拟发包应该发送的post地址，还有需要发送的数据包<br><img src="/css/teacherRefreshTimesImage/2.png" alt="avatar"></p>
<p>百度后发现加密方式为base64，发包的时候需要加密一下，还有下载验证码图片到本地。然后登录后打开需要刷次数的url<br><img src="/css/teacherRefreshTimesImage/3.png" alt="avatar"></p>
<p>重新发送这个包看看<br><img src="/css/teacherRefreshTimesImage/4.png" alt="avatar"></p>
<p>发现它增加了，那只要发这个包就好了。<br><img src="/css/teacherRefreshTimesImage/5.png" alt="avatar"></p>
<p>完成了一个，还有个学生页面的统计次数，这个页面我查看了好多次包也重新发送过试过很多次，发现都实现不了增加次数。<br><img src="/css/teacherRefreshTimesImage/6.png" alt="avatar"></p>
<h2 id="学生页面次数刷新"><a href="#学生页面次数刷新" class="headerlink" title="学生页面次数刷新"></a>学生页面次数刷新</h2><p>但是手动刷新却可以，换个思路，决定在控制台打js代码了（哈哈哈哈哈）<br><img src="/css/teacherRefreshTimesImage/7.png" alt="avatar"></p>
<p>次数增加了，搞定。<br><img src="/css/teacherRefreshTimesImage/8.png" alt="avatar"></p>
<p>python贴部分代码，源码可去我的github中下载。<br><img src="/css/teacherRefreshTimesImage/9.png" alt="avatar"><br>源码：<a href="https://github.com/iiiJr/Homework" target="_blank" rel="noopener">https://github.com/iiiJr/Homework</a><br>下面贴一下js代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeout = prompt(<span class="string">"设置刷新时间间隔[S]"</span>);  </span><br><span class="line"><span class="comment">// 获取当前的URL  </span></span><br><span class="line"><span class="keyword">var</span> current = location.href;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(timeout &gt; <span class="number">0</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 时间间隔大于0，timeout秒之后执行reload函数  </span></span><br><span class="line">    setTimeout(<span class="string">'reload()'</span>, <span class="number">1000</span> * timeout);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 时间间隔不大于0，仅刷新一次  </span></span><br><span class="line">    location.replace(current);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reload</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">// timeout秒后执行reload函数，实现无限循环刷新  </span></span><br><span class="line">    setTimeout(<span class="string">'reload()'</span>, <span class="number">1000</span> * timeout);  </span><br><span class="line">    <span class="comment">// 下面两行代码的格式化后的内容为：  </span></span><br><span class="line">    <span class="comment">// &lt;frameset cols='*'&gt;  </span></span><br><span class="line">    <span class="comment">//     &lt;frame src='当前地址栏的URL' /&gt;  </span></span><br><span class="line">    <span class="comment">// &lt;/frameset&gt;  </span></span><br><span class="line">    <span class="keyword">var</span> fr4me = <span class="string">'&lt;frameset cols=\'*\'&gt;\n&lt;frame src=\''</span> + current + <span class="string">'\' /&gt;'</span>;  </span><br><span class="line">    fr4me += <span class="string">'&lt;/frameset&gt;'</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span>(<span class="built_in">document</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// 引用document对象，调用write方法写入框架，打开新窗口  </span></span><br><span class="line">        write(fr4me);  </span><br><span class="line">        <span class="comment">// 关闭上面的窗口  </span></span><br><span class="line">        <span class="keyword">void</span>(close());  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2019/10/12/%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<p>ß</p>
<h2 id="1-队列的概念"><a href="#1-队列的概念" class="headerlink" title="1.队列的概念"></a>1.队列的概念</h2><p>只允许在一端插入数据操作，在另一端进行删除数据操作的特殊线性表；进行插入操作的一端称为队尾（入队列），进行删除操作的一端称为队头（出队列）；队列具有先进先出（FIFO）的特性。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  Queue</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ljr on 2019/10/12.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 ljr. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span> <span class="title">node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span> * <span class="title">link</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QueueNode</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">link front = <span class="literal">NULL</span>;</span><br><span class="line">link rear = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    link newNode;</span><br><span class="line">    newNode = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    newNode -&gt; data = value;</span><br><span class="line">    newNode -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (front == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        front = newNode;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rear -&gt; next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    rear = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    link top;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">if</span> (front != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        top = front;</span><br><span class="line">        front = front -&gt; next;</span><br><span class="line">        temp = top -&gt; data;</span><br><span class="line">        <span class="built_in">free</span>(top);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rear = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    link point;</span><br><span class="line">    point = front;</span><br><span class="line">    <span class="keyword">while</span> (point != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; point -&gt; data &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        point = point -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> select;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1.input a data\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"2.Output a data\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"3.Exit\n"</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line">        <span class="keyword">switch</span> (select) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"please input a value\n"</span>;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">                addQueue(temp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span>(delQueue() == <span class="number">-1</span>)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the queue is empty!\n"</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the out value is "</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        system(<span class="string">"clear"</span>);</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2019/10/11/%E6%A0%88/</url>
    <content><![CDATA[<p>用来自己学习用嘎</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈的主要特点就是先进后出；<br>即后入的元素先出；<br>可删除和增加元素操作的一端叫做栈顶；<br>栈可以用指针来仿真也可以用数组来仿真；这里我用的是指针仿真栈；<br>数组和指针仿真是不一样的，数组的话栈底一般为数组的第一个元素；而不是最后一个，因为在动态添加栈时如果栈顶是数组第一个元素的话就要使数组的每一个元素都移动一位；所以栈顶为数组最后一位数；<br>指针的栈顶就是让原本的栈顶指向新插入的栈顶就可以了；栈底就是第一个插入的元素了；<br>kk代码（函数中的代码都测试过，在主函数中调用既可）；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  stack</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ljr on 2019/10/11.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 ljr. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> * <span class="title">link</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> <span class="title">Snode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">link <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    link p;</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function">link <span class="title">push</span><span class="params">(link Head,ElemType x)</span></span>&#123;</span><br><span class="line">    link p;</span><br><span class="line">    p = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Snode));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nMemory Error\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p -&gt; data = x;</span><br><span class="line">    p -&gt; next = Head;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">link <span class="title">pop</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nStack is Empty!\n"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        <span class="keyword">delete</span>(Head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放栈</span></span><br><span class="line"><span class="function">link <span class="title">setnull</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        <span class="keyword">delete</span> Head;</span><br><span class="line">        Head = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取栈长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lenth</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    link p;</span><br><span class="line">    p = Head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        len++;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gettop</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n Stack is empty\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Head -&gt; data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nStack is empty\n"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p -&gt; data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">        &#125;<span class="keyword">while</span>(p != <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//    int i, x;</span></span><br><span class="line">    link head1;</span><br><span class="line">    head1 = init();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2019/09/30/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>用来自己学习用嘎</p>
<h2 id="头文件和结构"><a href="#头文件和结构" class="headerlink" title="头文件和结构"></a>头文件和结构</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  helloworld</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ljr on 2019/9/29.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 ljr. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> * <span class="title">link</span>;</span>   <span class="comment">//代表链表指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> <span class="title">Lnode</span>;</span>      <span class="comment">// 代表链表节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span></span><br><span class="line">    ElemType data;      <span class="comment">//创一个整型为例子8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="创建链表函数"><a href="#创建链表函数" class="headerlink" title="创建链表函数"></a>创建链表函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="function">link <span class="title">create</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    ElemType newData;</span><br><span class="line">    link NewPoint;</span><br><span class="line">    Head = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input number: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;newData);</span><br><span class="line">    Head -&gt; data = newData;</span><br><span class="line">    Head -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        NewPoint = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">        <span class="keyword">if</span>(NewPoint == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please input number: input '-1' means exit\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;newData);</span><br><span class="line">        <span class="keyword">if</span> (newData == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        NewPoint -&gt; data = newData;</span><br><span class="line">        NewPoint -&gt; next = Head;</span><br><span class="line">        Head = NewPoint;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="显示链表"><a href="#显示链表" class="headerlink" title="显示链表"></a>显示链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nList is empty"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p -&gt; data);</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">        &#125;<span class="keyword">while</span>(p != <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入节点、删除节点、获取节点、查找节点。"><a href="#插入节点、删除节点、获取节点、查找节点。" class="headerlink" title="插入节点、删除节点、获取节点、查找节点。"></a>插入节点、删除节点、获取节点、查找节点。</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点插入</span></span><br><span class="line"><span class="function">link <span class="title">insert</span><span class="params">(link Head,ElemType x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    link NewPoint,p = Head;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    NewPoint = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    NewPoint -&gt; data = x;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        NewPoint -&gt; next = Head;</span><br><span class="line">        Head = NewPoint;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; i<span class="number">-1</span> &amp;&amp; p -&gt; next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (j == i<span class="number">-1</span>) &#123;</span><br><span class="line">        NewPoint -&gt; next = p -&gt; next;</span><br><span class="line">        p -&gt; next = NewPoint;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"insert is failure,i si not right"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function">link <span class="title">del</span><span class="params">(link Head,<span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>; link p,t; p = Head;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        p = p -&gt; next; <span class="built_in">free</span>(Head); Head = p;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; i<span class="number">-1</span> &amp;&amp; p -&gt; next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">if</span>(p -&gt; next != <span class="literal">NULL</span> &amp;&amp; j == i<span class="number">-1</span>)&#123;</span><br><span class="line">            t = p -&gt; next;</span><br><span class="line">            p -&gt; next = t -&gt; next;</span><br><span class="line">        &#125;<span class="keyword">if</span>(t != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">free</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取节点元素value</span></span><br><span class="line"><span class="function">ElemType <span class="title">get</span><span class="params">(link Head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; p != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (p -&gt; data);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"data is error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找节点元素x的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locate</span><span class="params">(link Head, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>; link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p -&gt; data != x) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链表逆置"><a href="#链表逆置" class="headerlink" title="链表逆置"></a>链表逆置</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表逆置</span></span><br><span class="line"><span class="function">link <span class="title">re</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p = Head;</span><br><span class="line">    link n = <span class="literal">NULL</span>,temp;  <span class="comment">//n为保存的临时第一个链表节点，temp为第二个临时节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p -&gt; next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        temp = p;           <span class="comment">//  设置临时变量等于头节点</span></span><br><span class="line">        p = p -&gt; next;      <span class="comment">//  让p = p的下一个节点</span></span><br><span class="line">        temp -&gt; next = n;   <span class="comment">//  让p的下一个节点指向n   n第一次是NULL   后面将会等于临时变量temp</span></span><br><span class="line">        n = temp;           <span class="comment">//  让n = 要逆转的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lenth</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>; link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        len++;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接两个链表</span></span><br><span class="line"><span class="function">link <span class="title">connect</span><span class="params">(link Head1,link Head2)</span></span>&#123;</span><br><span class="line">    link p; p = Head1;</span><br><span class="line">    <span class="keyword">while</span> (p -&gt; next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    p -&gt; next = Head2;</span><br><span class="line">    <span class="keyword">return</span> Head1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个链表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(link Head1,link Head2)</span></span>&#123;</span><br><span class="line">    link p1,p2; p1 = Head1; p2 = Head2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((p1 -&gt; next == <span class="literal">NULL</span>)&amp;&amp;(p2 -&gt; next == <span class="literal">NULL</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p1 -&gt; data != p2 -&gt; data) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p1 = p1 -&gt; next;</span><br><span class="line">            p2 = p2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放链表</span></span><br><span class="line"><span class="function">link <span class="title">setnull</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        <span class="built_in">free</span>(Head);</span><br><span class="line">        Head = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    link head1 = <span class="literal">NULL</span>;</span><br><span class="line">    link head2 = <span class="literal">NULL</span>;</span><br><span class="line">    head1 = create(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nHead1 is\n"</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    head2 = create(head2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nHead2 is\n"</span>);</span><br><span class="line">    display(head2);</span><br><span class="line">    </span><br><span class="line">    l = compare(head1, head2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nl is %d\n"</span>,l);</span><br><span class="line">    </span><br><span class="line">    connect(head1, head2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nHead1 + Head2 is\n"</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    l = lenth(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nlenth is %d\n"</span>,l);</span><br><span class="line">    </span><br><span class="line">    l = get(head1,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nget is %d\n"</span>,l);</span><br><span class="line">    </span><br><span class="line">    l = locate(head1, <span class="number">12</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n locate 12 is %d"</span>,l);</span><br><span class="line">    </span><br><span class="line">    head1 = insert(head1, <span class="number">888</span>, <span class="number">5</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    head1 = del(head1, <span class="number">5</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------逆置前kk---------------\n"</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------逆置后kk---------------\n"</span>);</span><br><span class="line">    head1 = re(head1);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    head1 = setnull(head1);</span><br><span class="line">    display(head1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码可直接copy"><a href="#完整代码可直接copy" class="headerlink" title="完整代码可直接copy"></a>完整代码可直接copy</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  helloworld</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by ljr on 2019/9/29.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 ljr. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> * <span class="title">link</span>;</span>   <span class="comment">//代表链表指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> <span class="title">Lnode</span>;</span>      <span class="comment">// 代表链表节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span></span><br><span class="line">    ElemType data;      <span class="comment">//创一个整型为例子8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="function">link <span class="title">create</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    ElemType newData;</span><br><span class="line">    link NewPoint;</span><br><span class="line">    Head = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input number: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;newData);</span><br><span class="line">    Head -&gt; data = newData;</span><br><span class="line">    Head -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        NewPoint = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">        <span class="keyword">if</span>(NewPoint == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please input number: input '-1' means exit\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;newData);</span><br><span class="line">        <span class="keyword">if</span> (newData == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        NewPoint -&gt; data = newData;</span><br><span class="line">        NewPoint -&gt; next = Head;</span><br><span class="line">        Head = NewPoint;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nList is empty"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p -&gt; data);</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">        &#125;<span class="keyword">while</span>(p != <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点插入</span></span><br><span class="line"><span class="function">link <span class="title">insert</span><span class="params">(link Head,ElemType x,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    link NewPoint,p = Head;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    NewPoint = (link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    NewPoint -&gt; data = x;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        NewPoint -&gt; next = Head;</span><br><span class="line">        Head = NewPoint;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; i<span class="number">-1</span> &amp;&amp; p -&gt; next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (j == i<span class="number">-1</span>) &#123;</span><br><span class="line">        NewPoint -&gt; next = p -&gt; next;</span><br><span class="line">        p -&gt; next = NewPoint;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"insert is failure,i si not right"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function">link <span class="title">del</span><span class="params">(link Head,<span class="keyword">int</span> i )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>; link p,t; p = Head;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;</span><br><span class="line">        p = p -&gt; next; <span class="built_in">free</span>(Head); Head = p;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; i<span class="number">-1</span> &amp;&amp; p -&gt; next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">if</span>(p -&gt; next != <span class="literal">NULL</span> &amp;&amp; j == i<span class="number">-1</span>)&#123;</span><br><span class="line">            t = p -&gt; next;</span><br><span class="line">            p -&gt; next = t -&gt; next;</span><br><span class="line">        &#125;<span class="keyword">if</span>(t != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">free</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取节点元素value</span></span><br><span class="line"><span class="function">ElemType <span class="title">get</span><span class="params">(link Head,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; p != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (p -&gt; data);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"data is error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找节点元素x的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locate</span><span class="params">(link Head, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>; link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p -&gt; data != x) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lenth</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>; link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        len++;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接两个链表</span></span><br><span class="line"><span class="function">link <span class="title">connect</span><span class="params">(link Head1,link Head2)</span></span>&#123;</span><br><span class="line">    link p; p = Head1;</span><br><span class="line">    <span class="keyword">while</span> (p -&gt; next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    p -&gt; next = Head2;</span><br><span class="line">    <span class="keyword">return</span> Head1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个链表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(link Head1,link Head2)</span></span>&#123;</span><br><span class="line">    link p1,p2; p1 = Head1; p2 = Head2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((p1 -&gt; next == <span class="literal">NULL</span>)&amp;&amp;(p2 -&gt; next == <span class="literal">NULL</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p1 -&gt; data != p2 -&gt; data) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p1 = p1 -&gt; next;</span><br><span class="line">            p2 = p2 -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放链表</span></span><br><span class="line"><span class="function">link <span class="title">setnull</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p; p = Head;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        <span class="built_in">free</span>(Head);</span><br><span class="line">        Head = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表逆置</span></span><br><span class="line"><span class="function">link <span class="title">re</span><span class="params">(link Head)</span></span>&#123;</span><br><span class="line">    link p = Head;</span><br><span class="line">    link n = <span class="literal">NULL</span>,temp;  <span class="comment">//n为保存的临时第一个链表节点，temp为第二个临时节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p -&gt; next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        temp = p;           <span class="comment">//  设置临时变量等于头节点</span></span><br><span class="line">        p = p -&gt; next;      <span class="comment">//  让p = p的下一个节点</span></span><br><span class="line">        temp -&gt; next = n;   <span class="comment">//  让p的下一个节点指向n   n第一次是NULL   后面将会等于临时变量temp</span></span><br><span class="line">        n = temp;           <span class="comment">//  让n = 要逆转的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    link head1 = <span class="literal">NULL</span>;</span><br><span class="line">    link head2 = <span class="literal">NULL</span>;</span><br><span class="line">    head1 = create(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nHead1 is\n"</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    head2 = create(head2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nHead2 is\n"</span>);</span><br><span class="line">    display(head2);</span><br><span class="line">    </span><br><span class="line">    l = compare(head1, head2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nl is %d\n"</span>,l);</span><br><span class="line">    </span><br><span class="line">    connect(head1, head2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nHead1 + Head2 is\n"</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    l = lenth(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nlenth is %d\n"</span>,l);</span><br><span class="line">    </span><br><span class="line">    l = get(head1,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nget is %d\n"</span>,l);</span><br><span class="line">    </span><br><span class="line">    l = locate(head1, <span class="number">12</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n locate 12 is %d"</span>,l);</span><br><span class="line">    </span><br><span class="line">    head1 = insert(head1, <span class="number">888</span>, <span class="number">5</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    head1 = del(head1, <span class="number">5</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------逆置前kk---------------\n"</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------逆置后kk---------------\n"</span>);</span><br><span class="line">    head1 = re(head1);</span><br><span class="line">    display(head1);</span><br><span class="line">    </span><br><span class="line">    head1 = setnull(head1);</span><br><span class="line">    display(head1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2019-10-09-增加递归逆置链表；"><a href="#2019-10-09-增加递归逆置链表；" class="headerlink" title="2019.10.09 增加递归逆置链表；"></a>2019.10.09 增加递归逆置链表；</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码如下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> * <span class="title">link</span>;</span>   <span class="comment">//代表链表指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> <span class="title">Lnode</span>;</span>      <span class="comment">// 代表链表节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span></span><br><span class="line">    ElemType data;      <span class="comment">//创一个整型为例子8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">List * <span class="title">reverseList</span><span class="params">(List * Head)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果链表为空或者链表中只有一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (Head -&gt; next == <span class="literal">NULL</span> || Head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Head;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        List * newHead = reverseList(Head -&gt; next);   <span class="comment">//先反转后面的链表</span></span><br><span class="line">        Head -&gt; next -&gt; next = Head;  <span class="comment">//再将当前节点设置为其然来后面节点的后续节点</span></span><br><span class="line">        Head -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    link head1 = <span class="literal">NULL</span>;</span><br><span class="line">    head1 = create(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nHead1 is\n"</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------逆置前kk---------------\n"</span>);</span><br><span class="line">    display(head1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------逆置后kk---------------\n"</span>);</span><br><span class="line">    head1 = reverseList(head1);</span><br><span class="line">    display(head1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2019/09/29/git/</url>
    <content><![CDATA[<h2 id="记一次小作业"><a href="#记一次小作业" class="headerlink" title="记一次小作业"></a>记一次小作业</h2><p>默认已经下载git<br>第一步先生成ssh秘钥吧哈哈哈哈，具体创建方法看下面的网址8。</p>
<pre><code class="bash">
https://blog.csdn.net/lucky__yang/article/details/80148420

</code></pre>
<p>好了后就开始创建个仓库8.不会创建？<br>那看这个，看到创建完仓库8.</p>
<pre><code class="bash">https://blog.csdn.net/qq_35869389/article/details/79472564</code></pre>
<p><img src="/css/gitphoto/1.png" alt="avatar"></p>
<p>再在本地计算机中创建一个test文件夹<br><img src="/css/gitphoto/2.jpeg" alt="avatar"></p>
<p>随便打点东西在cpp中<br><img src="/css/gitphoto/3.jpeg" alt="avatar"></p>
<p>进入文件夹后再Git中输入init</p>
<p>再输入git status查看文件下都有什么文件<br><img src="/css/gitphoto/4.jpeg" alt="avatar"></p>
<p>利用 git add  main.cpp添加文件<br>在打一次Git status就会有绿色的文件表示成功<br><img src="/css/gitphoto/5.png" alt="avatar"></p>
<p>最后成功<br><img src="/css/gitphoto/6.jpeg" alt="avatar"></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>from表单提交检测</title>
    <url>/2019/09/21/from%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="以前一直认为form是只能直接提交数据的，直到今天突然发现"><a href="#以前一直认为form是只能直接提交数据的，直到今天突然发现" class="headerlink" title="以前一直认为form是只能直接提交数据的，直到今天突然发现"></a>以前一直认为form是只能直接提交数据的，直到今天突然发现</h2><p>先看看一个简单的html代码：一个简单的提交没什么的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"login.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"login.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loginBigArea"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loginInsideArea"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loginTitle"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"学号"</span> <span class="attr">class</span>=<span class="string">"scanf"</span> <span class="attr">id</span>=<span class="string">"stuNum"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">class</span>=<span class="string">"scanf"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"subBut"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在来看看js中的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStuNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = $(<span class="string">"#stuNum"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> reg_num = <span class="regexp">/^\w&#123;8&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = reg_num.test(num);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        $(<span class="string">"#stuNum"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid #5eb6de"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">"#stuNum"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;    <span class="comment">//这里返回的数据如果是false，那表单将不会提交</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pwd = $(<span class="string">"#pwd"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> reg_pwd = <span class="regexp">/^\w&#123;6,20&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = reg_pwd.test(pwd);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        $(<span class="string">"#pwd"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid #5eb6de"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="string">"#pwd"</span>).css(<span class="string">"border"</span>,<span class="string">"1px solid red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;    <span class="comment">//这里返回的数据如果是false，那表单将不会提交</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//当表单提交时调用所有校验方法</span></span><br><span class="line">    $(<span class="string">"#loginForm"</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> checkStuNum() &amp;&amp; checkPwd();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当鼠标失去焦点，调用校验方法</span></span><br><span class="line">    $(<span class="string">"#stuNum"</span>).blur(checkStuNum);</span><br><span class="line">    $(<span class="string">"#pwd"</span>).blur(checkPwd);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>是的，这样做之后，表单会在检测之后才提交！！！<br>可能是我没好好学js的原因吧，才知道可以这样子。</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax</title>
    <url>/2019/09/21/ajax/</url>
    <content><![CDATA[<p>自己遇到的小问题</p>
<h2 id="ajax提交后获取不到数据"><a href="#ajax提交后获取不到数据" class="headerlink" title="ajax提交后获取不到数据"></a>ajax提交后获取不到数据</h2><p>#2019/05/26</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"../checkLoginServlet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loginTitle"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"学号"</span> <span class="attr">class</span>=<span class="string">"scanf"</span> <span class="attr">id</span>=<span class="string">"stuNum"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">class</span>=<span class="string">"scanf"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"subBut"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提交不到数据时我是这样写的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//后来才知道，表单序列化 都是user=xxx&amp;xxx  这种格式，所以需要在<span class="tag">&lt;<span class="name">input</span>&gt;</span>标签中添加一个name，才能序列号</span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"../checkLoginServlet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loginTitle"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"学号"</span> <span class="attr">class</span>=<span class="string">"scanf"</span> <span class="attr">id</span>=<span class="string">"stuNum"</span> <span class="attr">name</span>=<span class="string">"stuNum"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">class</span>=<span class="string">"scanf"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"subBut"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>js转jquery</title>
    <url>/2019/09/21/js%E8%BD%ACjquery/</url>
    <content><![CDATA[<p>js对象转换成jquery对象<br>#2019/05/26</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serialize() 方法通过序列化表单值，创建 URL 编码文本字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化的值可在生成 AJAX 请求时用于 URL 查询字符串中。</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"form"</span>).serialize()</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出后会变成a=1&amp;b=2&amp;c=3&amp;d=4&amp;e=5</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2019/09/19/docker/</url>
    <content><![CDATA[<h2 id="docke的基本使用-容器的创建还有镜像的下载看网址就好："><a href="#docke的基本使用-容器的创建还有镜像的下载看网址就好：" class="headerlink" title="docke的基本使用:容器的创建还有镜像的下载看网址就好："></a>docke的基本使用:容器的创建还有镜像的下载看网址就好：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://www.runoob.com/docker/docker-install-tomcat.html</span><br></pre></td></tr></table></figure>

<h2 id="常用命令大全："><a href="#常用命令大全：" class="headerlink" title="常用命令大全："></a>常用命令大全：</h2><p> 先了解下基础操作命令<br> 镜像: 应用程序所依赖的操作环境和配置形成的模板，用面向对象的话来说简称类<br> 容器: 通过镜像来运行容器，容器相当于类的实例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ip addr/ip link/ ifconfig：查看宿主机里ip地址（宿主机表示是虚拟机)</span><br><span class="line"></span><br><span class="line">systemctl start docker/service start docker：启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker:关闭docker服务</span><br><span class="line"></span><br><span class="line">service iptables start:启动防火墙</span><br><span class="line"></span><br><span class="line">service iptables restart:重启防火墙</span><br><span class="line"></span><br><span class="line">service iptables stop:关闭防火墙</span><br><span class="line"></span><br><span class="line">docker run：启动container</span><br><span class="line"></span><br><span class="line">docker seach xxxx(镜像名称):检索镜像</span><br><span class="line"></span><br><span class="line">docker pull xxx(镜像名称）：拉取镜像</span><br><span class="line"></span><br><span class="line">docker images:列出镜像</span><br><span class="line"></span><br><span class="line">docker  --version:查看docker的版本信息</span><br><span class="line"></span><br><span class="line">[root@localhost  ~]:家目录</span><br><span class="line"></span><br><span class="line">[root@localhost  /]:根目录</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> Container Id:进入容器</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it NAMES(自定义名称) /bin/bash:进入--name命名的容器</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> NAMES(容器的自定义名称）-it bash:进入容器里进行操作</span><br><span class="line"></span><br><span class="line">docker attach Container Id:进入到容器的终端</span><br><span class="line"></span><br><span class="line">docker inspect IMAGE ID:显示容器或镜像的元数据</span><br><span class="line"></span><br><span class="line">[root@（container id）]：比如[root@24527d42d3eb]表示已进入docker里的一个CONTAINER ID的容器内部</span><br><span class="line"></span><br><span class="line">[root@24527d42d3eb]:<span class="built_in">exit</span>(从容器里退出）。</span><br><span class="line"></span><br><span class="line">docker ps：查看docker里运行的容器（status为Up....表示运行中）</span><br><span class="line"></span><br><span class="line">docker ps -a:查看docker里已停止或正在运行的容器（status为Exit)</span><br><span class="line"></span><br><span class="line">docker start CONTAINER ID   ：如果容器的状态为Exit,用它来启动容器</span><br><span class="line"></span><br><span class="line">docker stop CONTAINER ID   :停止正在运行的容器，删除一个容器必须先要停止</span><br><span class="line"></span><br><span class="line">docker restart :当部署web项目的war文件，到tomcat里的webapps里面了，重启一下docker服务，就自动解压了war文件</span><br><span class="line"></span><br><span class="line">docker rm CONTAINER ID ：删除容器</span><br><span class="line"></span><br><span class="line">docker rm $(docker ps -a -q)：删除所有已停止的容器;</span><br><span class="line"></span><br><span class="line">docekr rmi IMAGE ID:删除镜像</span><br><span class="line"></span><br><span class="line">rm -rf xxxx：强制删除某个war.文件或目录、文件</span><br><span class="line"></span><br><span class="line">docker cp /xxx.war CONTAINER ID   :/usr/<span class="built_in">local</span>/tomcat/webapps：从/根目录复制一个打包后的Java web war文件 到tomcat容器里的webapps工作目录里</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> CONTAINER ID   ls /usr/<span class="built_in">local</span>/tomcat:默认的 安装tomcat镜像的webapps目录</span><br><span class="line"></span><br><span class="line">docker run -name xxx -p  (自定义端口号,用来访问的):(容器的端口号：比如tomcat的8080，mysql的3306） -d docker.io/tomcat(镜像名称)：表示在docker里运行一个tomcat容器,如果没有镜像，自动pull一个tomcat的镜像</span><br><span class="line"></span><br><span class="line">--name 为容器取一个名字</span><br><span class="line"></span><br><span class="line">-p 容器要映射的端口号</span><br><span class="line"></span><br><span class="line">-d:后台运行</span><br><span class="line"></span><br><span class="line">-t：进入终端</span><br><span class="line"></span><br><span class="line">-i：获得一个交互式的连接，通过获取container的输入</span><br><span class="line"></span><br><span class="line">/bin/bash：在container中启动一个bash shell</span><br></pre></td></tr></table></figure>

<p> 因为我只在docker中建立了tomcat的和mysql两个环境，所以这里就只讲讲tomcat和mysql的创建：</p>
<h3 id="开始安装tomcat"><a href="#开始安装tomcat" class="headerlink" title="开始安装tomcat"></a>开始安装tomcat</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入这条命令</span><br><span class="line">docker run --name tomcat -p 8080:8080 -d tomcat</span><br><span class="line"></span><br><span class="line">在用docker ps查看的时候显示的是</span><br><span class="line">eee4f17b3f78        tomcat              <span class="string">"catalina.sh run"</span>   15 seconds ago      Up 14 seconds       0.0.0.0:8080-&gt;8080/tcp   tomcat</span><br><span class="line"></span><br><span class="line">默认是0.0.0.0:8080登录这个网址就会出现tomcat主页</span><br><span class="line"></span><br><span class="line">127.0.0.1:8080不行，就去百度了一下端口映射的问题</span><br><span class="line">然后发现在创建的时候用这条语句之后就可以访问了将本机的端口映射过去了，在本机浏览器中输入127.0.0.1:8080或localhost:8080既可</span><br><span class="line">docker run --name tomcat -p 127.0.0.1:8080:8080 -d tomcat</span><br></pre></td></tr></table></figure>

<h3 id="mysql的话"><a href="#mysql的话" class="headerlink" title="mysql的话"></a>mysql的话</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这条语句就搞定了  其中的东西自己配置</span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br><span class="line"></span><br><span class="line">然后输入docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br><span class="line">mysql -uroot -p123456 测试成功；就Vans了</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy</title>
    <url>/2019/09/18/scrapy/</url>
    <content><![CDATA[<h2 id="Scrapy框架的安装"><a href="#Scrapy框架的安装" class="headerlink" title="Scrapy框架的安装"></a>Scrapy框架的安装</h2><p>先pip install wheel,在去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://www.lfd.uci.edu/~gohlke/pythonlibs/</span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lxml‑<span class="number">4.3</span><span class="number">.4</span>‑cp36‑cp36m‑win_amd64.whll</span><br></pre></td></tr></table></figure>

<p>注意根据型号什么的下载，然后再</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install 下载的文件地址</span><br></pre></td></tr></table></figure>

<p>然后再去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://pypi.org/project/pyOpenSSL/<span class="comment">#downloads</span></span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyOpenSSL<span class="number">-19.0</span><span class="number">.0</span>-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure>

<p>继续</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://www.lfd.uci.edu/~gohlke/pythonlibs/</span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">twain‑<span class="number">1.0</span><span class="number">.4</span>‑cp36‑cp36m‑win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>继续</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://sourceforge.net/projects/pywin32/files/pywin32/Build%<span class="number">20221</span>/</span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pywin32<span class="number">-221.</span>win-AMD64-py3<span class="number">.6</span>.exe </span><br><span class="line">(这个我没找到最后用pip install pywin32成功安装的溜了溜了。)</span><br></pre></td></tr></table></figure>

<p>遇到了各种问题，我累了，懒得一一列出来</p>
<h2 id="scrapy调试工具"><a href="#scrapy调试工具" class="headerlink" title="scrapy调试工具"></a>scrapy调试工具</h2><p>命令行中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scrapy shell http://lab.scrapyd.cn</span><br></pre></td></tr></table></figure>

<p>scrapy shell 固定格式，后面的话跟的是你要调试的页面，如果是百度就：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scrapy shell (http://www.baidu.com)(URL可改变)</span><br></pre></td></tr></table></figure>

<p>就这样一个格式，其实这段代码就是一个下载的过程，一执行这么一段代码scrapy就立马把我们相应链接的相应页面给拿到了，那接下来就可以任你处置了。</p>
<p>在要提前的调试界面In中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">response.css(<span class="string">'title'</span>)</span><br></pre></td></tr></table></figure>

<p>之类的语句就可以自动调试了</p>
<h2 id="scrapy框架的基本使用"><a href="#scrapy框架的基本使用" class="headerlink" title="scrapy框架的基本使用"></a>scrapy框架的基本使用</h2><p>在需要创建的目录下打开cmd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">然后输入 scrapy startproject /项目名称/.</span><br></pre></td></tr></table></figure>

<p>在输入需要爬取的URL<br>进入创建的目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入 scrapy genspider quotes /URL/.</span><br></pre></td></tr></table></figure>

<p>这里也可以手动创建一个python文件，同理:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class mingyan(scrapy.Spider): <span class="comment">#需要继承scrapy.Spider类</span></span><br><span class="line">    </span><br><span class="line">name = <span class="string">"mingyan2"</span> <span class="comment"># 定义蜘蛛名</span></span><br><span class="line"></span><br><span class="line">    def start_requests(self): <span class="comment"># 由此方法通过下面链接爬取页面</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义爬取的链接</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">'http://lab.scrapyd.cn/page/1/'</span>,</span><br><span class="line">            <span class="string">'http://lab.scrapyd.cn/page/2/'</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            yield scrapy.Request(url=url, callback=self.parse) <span class="comment">#爬取到的页面如何处理？提交给parse方法处理</span></span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line"></span><br><span class="line">        <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        start_requests已经爬取到页面，那如何提取我们想要的内容呢？那就可以在这个方法里面定义。</span></span><br><span class="line"><span class="string">        这里的话，并木有定义，只是简单的把页面做了一个保存，并没有涉及提取我们想要的数据，后面会慢慢说到</span></span><br><span class="line"><span class="string">        也就是用xpath、正则、或是css进行相应提取，这个例子就是让你看看scrapy运行的流程：</span></span><br><span class="line"><span class="string">        1、定义链接；</span></span><br><span class="line"><span class="string">        2、通过链接爬取（下载）页面；</span></span><br><span class="line"><span class="string">        3、定义规则，然后提取数据；</span></span><br><span class="line"><span class="string">        就是这么个流程，4不4很简单呀？</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[-2]     <span class="comment">#根据上面的链接提取分页,如：/page/1/，提取到的就是：1</span></span><br><span class="line">        filename = <span class="string">'mingyan-%s.html'</span> % page    <span class="comment">#拼接文件名，如果是第一页，最终文件名便是：mingyan-1.html</span></span><br><span class="line">        with open(filename, <span class="string">'wb'</span>) as f:        <span class="comment">#python文件操作，不多说了；</span></span><br><span class="line">            f.write(response.body)             <span class="comment">#刚才下载的页面去哪里了？response.body就代表了刚才下载的页面！</span></span><br><span class="line">        self.log(<span class="string">'保存文件: %s'</span> % filename)      <span class="comment"># 打个日志</span></span><br></pre></td></tr></table></figure>

<h2 id="scrapy-css选择器的使用"><a href="#scrapy-css选择器的使用" class="headerlink" title="scrapy css选择器的使用"></a>scrapy css选择器的使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入response.css(<span class="string">'title'</span>)</span><br><span class="line">可以得到[&lt;Selector xpath=<span class="string">'descendant-or-self::title'</span> data=<span class="string">'&lt;title&gt;xxxxxxxxxxxxxxxxx&lt;/title&gt;'</span>&gt;]类似的东西</span><br></pre></td></tr></table></figure>

<p>如果你加上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">response.css(<span class="string">'title'</span>).extract()这个</span><br><span class="line">他就会变成[<span class="string">'&lt;title&gt;xxxxxxxxxxx&lt;/title&gt;'</span>]列表的形式，如果不需要列表可以这样。</span><br><span class="line"></span><br><span class="line">response.css(<span class="string">'title'</span>).extract_first()，那么爬下来的数据为这样</span><br><span class="line"> <span class="string">'&lt;title&gt;xxxxxxxxxxx&lt;/title&gt;'</span></span><br><span class="line"> </span><br><span class="line"> extract_first()就代表提取第一个元素（我想这个谁都看得出来）</span><br><span class="line"> 当然如果你觉得怎么多了个title标签  那你可以这样：</span><br><span class="line"> response.css(<span class="string">'title::text'</span>).extract_first()</span><br><span class="line"> </span><br><span class="line"> 这样爬下来的数据就是xxxxxxxxxxx了</span><br></pre></td></tr></table></figure>

<p>我们该如何提取URL呢？提取属性我们是用：“标签名::attr(属性名)”，比如我们要提取url表达式就是：a::attr(href)，要提取图片地址的表达式就是：img::attr(src)……以此类推：<br>获取所有a标签下的所以href</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">response.css(<span class="string">"a::attr(href)"</span>)</span><br></pre></td></tr></table></figure>

<p>获取固定class样式下的标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">response.css(<span class="string">".page-navigator a::attr(href)"</span>).extract()</span><br></pre></td></tr></table></figure>

<p>如果是src那就要这样写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">response.css(<span class="string">".xxxx img::attr(src)"</span>).extract()</span><br></pre></td></tr></table></figure>

<p>还有好多,自己发挥。</p>
<h2 id="xpath提取数据"><a href="#xpath提取数据" class="headerlink" title="xpath提取数据"></a>xpath提取数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodename  =   选取此节点的所有子节点。</span><br><span class="line">/         =   从根节点选取。</span><br><span class="line">//        =   从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</span><br><span class="line">.         =   选取当前节点。</span><br><span class="line">..        =   选取当前节点的父节点。</span><br><span class="line">@         =   选取属性。</span><br></pre></td></tr></table></figure>

<p>response.xpath(“表达式”)，提取属性的话既然使用：@，那我们要提取href就是：@href</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In: response.xpath(<span class="string">"@href"</span>)</span><br><span class="line">out: []</span><br></pre></td></tr></table></figure>

<p>可以看到输出为0,因为我们木有限定从哪里提取,一般我们都需要加个：//，再来试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In: response.xpath(<span class="string">"//@href"</span>)</span><br><span class="line">out: </span><br><span class="line">[&lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'//cdnjscn.b0.upaiyun.com/libs/normalize/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/usr/themes/default'</span>&gt;,</span><br><span class="line"> ……</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/tag/%E7%8E%8B%E5%B'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/tag/%E6%99%BA%E6%8'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/tag/%E6%B3%B0%E6%8'</span>&gt;,</span><br><span class="line">……</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/tag/%E8%AF%8D/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://lab.scrapyd.cn'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://bbs.scrapyd.cn'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://www.scrapyd.cn'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/'</span>&gt;]</span><br></pre></td></tr></table></figure>

<p>已经提取到了，只是这是这个页面所有的href，并非是我们想要的，那和css选择一样我们需要加以限制.例如一个ol标签下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In: response.xpath(<span class="string">"//ol//@href"</span>)</span><br><span class="line"></span><br><span class="line">Out:</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//ol//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/page/1/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//ol//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/page/2/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//ol//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/page/3/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//ol//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/page/4/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//ol//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/page/6/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">'//ol//@href'</span> data=<span class="string">'http://lab.scrapyd.cn/page/2/'</span>&gt;]</span><br></pre></td></tr></table></figure>

<p>“//ol//@href”，这个表达式表示：ol标签下所有的href属性值，可以看到我们这里限定了html的ol标签，这里的话页面只有一个ol，不会出错，如果页面中有多个ol，那就不一定能得到我们想要的结果,<br>这里我们还能限定我们的属性，使用的是：标签[@属性名=’属性值’]； 例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;ol class=<span class="string">"page-navigator"</span>&gt;</span><br><span class="line">  ……</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>

<p>里面有个：class=“page-navigator”，那我们就可以这样限制：//ol[@class=”page-navigator”]//@href 好了，这样的话就能让ol尽量缩小范围，我们再来试试这个代码效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In : response.xpath(<span class="string">"//ol[@class='page-navigator']//@href"</span>)</span><br><span class="line">Out:</span><br><span class="line">[&lt;Selector xpath=<span class="string">"//ol[@class='page-navigator']//@href"</span> data=<span class="string">'http://lab.scrapyd</span></span><br><span class="line"><span class="string">.cn/page/1/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">"//ol[@class='page-navigator']//@href"</span> data=<span class="string">'http://lab.scrapyd</span></span><br><span class="line"><span class="string">.cn/page/2/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">"//ol[@class='page-navigator']//@href"</span> data=<span class="string">'http://lab.scrapyd</span></span><br><span class="line"><span class="string">.cn/page/3/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">"//ol[@class='page-navigator']//@href"</span> data=<span class="string">'http://lab.scrapyd</span></span><br><span class="line"><span class="string">.cn/page/4/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">"//ol[@class='page-navigator']//@href"</span> data=<span class="string">'http://lab.scrapyd</span></span><br><span class="line"><span class="string">.cn/page/6/'</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">"//ol[@class='page-navigator']//@href"</span> data=<span class="string">'http://lab.scrapyd</span></span><br><span class="line"><span class="string">.cn/page/2/'</span>&gt;]</span><br></pre></td></tr></table></figure>

<p>可以看到也是同样得到想要的效果，以此类推，可以根据自己的情况来缩小范围<br>如果这里的属性是id那就：ol[@id=’page-navigator’]<br>和css选择器一样，xpath中也有extract（）、extract_first()这两个函数，加上就可以提取纯粹的href值了</p>
<p>——————————–分割</p>
<p>接下来我们提取标签里面的内容，表达式： //text()，其实就是提取文本（不想说了，放个例子你们会懂得）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In : response.xpath(<span class="string">"//title//text()"</span>).extract()</span><br><span class="line">Out: [<span class="string">'xxxxxxxxxxx'</span>]</span><br></pre></td></tr></table></figure>

<p>可以看到，表达式为：//title//text() ，就是用到了：//text() 这个表达式，前面的：//title是限定你要提取的范围，同理如果你要提取首页右侧的标签，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;ul class=<span class="string">"tags-list"</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a style=<span class="string">"color:rgb(101,86,</span></span><br><span class="line"><span class="string">           72)"</span> href=<span class="string">"http://lab.scrapyd.cn/tag/%E4%BA%BA%E7%94%9F/"</span>&gt;</span><br><span class="line">         人生&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a style=<span class="string">"color:rgb(214,236,</span></span><br><span class="line"><span class="string">           5)"</span> href=<span class="string">"http://lab.scrapyd.cn/tag/%E5%8A%B1%E5%BF%97/"</span>&gt;</span><br><span class="line">         励志&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         ……</span><br><span class="line">        &lt;li&gt;&lt;a style=<span class="string">"color:rgb(4,4,</span></span><br><span class="line"><span class="string">           41)"</span> href=<span class="string">"http://lab.scrapyd.cn/tag/%E7%BB%9D%E4%B8%96%E5%A5%BD%E8%AF%8D/"</span>&gt;</span><br><span class="line">         绝世好词&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a style=<span class="string">"color:rgb(204,12,</span></span><br><span class="line"><span class="string">           225)"</span> href=<span class="string">"http://lab.scrapyd.cn/tag/%E6%9C%A8%E5%BF%83/"</span>&gt;</span><br><span class="line">         木心&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        ……</span><br><span class="line">     	&lt;li&gt;&lt;a href=<span class="string">"http://lab.scrapyd.cn"</span>&gt;返回首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"http://bbs.scrapyd.cn"</span> target=<span class="string">"_blank"</span>&gt;SCRAPY中文社区&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">	&lt;li&gt;&lt;a href=<span class="string">"http://www.scrapyd.cn"</span> target=<span class="string">"_blank"</span>&gt;SCRAPY中文网&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到标签文字是在 “class=tags-list” 的ul里面，那我们就可以这样写表达式：//ul[@class=’tags-list’]//a//text()，具体代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In [5]: response.xpath(<span class="string">"//ul[@class='tags-list']//a//text()"</span>).extract()</span><br><span class="line">Out[5]:</span><br><span class="line">[<span class="string">'\r\n         人生'</span>,</span><br><span class="line"> <span class="string">'\r\n         励志'</span>,</span><br><span class="line"> <span class="string">'\r\n         爱情'</span>,</span><br><span class="line"> <span class="string">'\r\n         王尔德'</span>,</span><br><span class="line"> <span class="string">'\r\n         智慧'</span>,</span><br><span class="line"> <span class="string">'\r\n         泰戈尔'</span>,</span><br><span class="line"> <span class="string">'\r\n         绝世好词'</span>,</span><br><span class="line"> <span class="string">'\r\n         木心'</span>,</span><br><span class="line"> <span class="string">'\r\n         艺术'</span>,</span><br><span class="line"> <span class="string">'\r\n         名画'</span>,</span><br><span class="line"> <span class="string">'\r\n         生活'</span>,</span><br><span class="line"> <span class="string">'\r\n         词'</span>,</span><br><span class="line"> <span class="string">'返回首页'</span>,</span><br><span class="line"> <span class="string">'SCRAPY中文社区'</span>,</span><br><span class="line"> <span class="string">'SCRAPY中文网'</span>]</span><br></pre></td></tr></table></figure>

<p> 可以看到经过这样的限制，我们就定位到了；</p>
<p> ——————–分割线</p>
<p> 包含HTML标签的所有文字内容提取：string()</p>
<p>如果我们用表达式：//div[@class=’post-content’]//text()，你会发现虽然能提取但是一个列表，不是整段文字：<br>那这里我们就用到一个xpath函数：string()，我们可以把表达式这样写：response.xpath(“string(//div[@class=’post-content’])”).extract()，可看到我们没有使用：text()，而是用：string(要提取内容的标签)，这样的话就能把数据都提取出来了，而且都合成为一条。</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/09/17/hello-world/</url>
    <content><![CDATA[<h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>很久前就想自己搭个博客，当时想自己手写前端后端，终于在最后放弃了(Hexo真香)<br>这里我就放平时自己做做的菜鸡笔记还有一些自己遇到的弱鸡问题好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ My first note</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
